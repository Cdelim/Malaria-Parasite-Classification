# -*- coding: utf-8 -*-
"""AlexNet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w9at1lKvfkjeZG2p3_GBkBVjXqNbwBUD
"""

from google.colab import drive
drive.mount('/content/drive')

import os
os.chdir ('/content/drive/My Drive/BBM406')

!unzip 'cell_images.zip'

from __future__ import print_function, division

import torch 
import torch.nn as nn
import torch.optim as optim
from torch.optim import lr_scheduler
from torch.autograd import Variable
import numpy as np
import torchvision
from torchvision import datasets, models, transforms
import matplotlib.pyplot as plt
import time
import os
import copy 
plt.ion()

use_gpu = torch.cuda.is_available()

if use_gpu:
    print("CUDA kullanılıyor")

data_dir = '/content/drive/My Drive/BBM406/cell_images'
TRAIN = 'train'
VAL = 'validation'
TEST = 'test'
# AlexNet Takes 224x224 images as input, so we resize all of them
data_transforms = {
    TRAIN: transforms.Compose([
        # Here, we randomly crop the image to 224x224 and
        # randomly flip it horizontally. 
        transforms.Resize((224,224)),
        #transforms.RandomHorizontalFlip(),
        transforms.ToTensor(),
        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
    ]),
    VAL: transforms.Compose([
        transforms.Resize((224,224)),
        #transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
    ]),
    TEST: transforms.Compose([
        transforms.Resize((224,224)),
        #transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
    ])
}
image_datasets = {
    x: datasets.ImageFolder(
        os.path.join(data_dir, x), 
        transform=data_transforms[x]
    )
    for x in [TRAIN, VAL, TEST]
}

dataloaders = {
    x: torch.utils.data.DataLoader(
        image_datasets[x], batch_size=32,
        shuffle=True, num_workers=4
    )
    for x in [TRAIN, VAL, TEST]
}

dataset_sizes = {x: len(image_datasets[x]) for x in [TRAIN, VAL, TEST]}

for x in [TRAIN, VAL, TEST]:
    print("Loaded {} images under {}".format(dataset_sizes[x], x))
    
print("Classes: ")
class_names = image_datasets[TRAIN].classes
print(image_datasets[TRAIN].classes)

def imshow(inp, title=None):
    inp = inp.numpy().transpose((1, 2, 0))
    #plt.figure(figsize=(10, 10))
    plt.axis('off')
    plt.imshow(inp)
    if title is not None:
        plt.title(title)
    plt.pause(0.001)
def show_databatch(inputs, classes):
    out = torchvision.utils.make_grid(inputs)
    imshow(out, title = [class_names[x] for x in classes])
#Eğitim verilerinden batch alıyoruz
inputs, classes = next(iter(dataloaders[TRAIN]))
show_databatch(inputs,classes)

def accuracy(test_data,data_labels,clf):
    predictions = clf.predict(test_data)
    print('Accuracy: ', accuracy_score(data_labels, predictions))
   
    return confusion_matrix(data_labels, predictions)

#accuracy(test_data,test_label,svmtrain)

def draw(lst_iter, lst_loss, lst_acc, title,save):
  
    #draw loss or accuracy graph
    plt.plot(lst_iter, lst_loss, '-b', label='loss')
    plt.plot(lst_iter, lst_acc, '-r', label='accuracy')
    plt.xlabel("epochs")
    plt.legend(loc='upper left')
    plt.title(title)

    if save==True:
        plt.savefig(title+".png")  # should before show method

    # show
    plt.show()

def visualize_model(alexNet, num_images=6):
    was_training = alexNet.training
    #Hesaplama için model oluşturuyoruz
    alexNet.train(False)
    alexNet.eval()
    
    images_so_far = 0
    count=0
    for i, data in enumerate(dataloaders[TEST]):
        count+=1
        inputs, labels = data
        size = inputs.size()[0]
        
        if use_gpu:
            inputs, labels = Variable(inputs.cuda(), volatile = True), Variable(labels.cuda(), volatile = True)
        else:
            inputs, labels = Variable(inputs, volatile = True), Variable(labels, volatile=True)
        outputs = alexNet(inputs)
        
        _, preds = torch.max(outputs.data, 1)
        predicted_labels = [preds[j] for j in range(inputs.size()[0])]
        print("Real:")
        show_databatch(inputs.data.cpu(), labels.data.cpu())
        print("Predict:")
        show_databatch(inputs.data.cpu(), predicted_labels)
        del inputs, labels, outputs, preds, predicted_labels
        torch.cuda.empty_cache()
        
        images_so_far += size
        if count==2:
          break
        if images_so_far >= num_images:
            break
        alexNet.train(mode=was_training) #Modeli orjinal haline çeviriyoruz.

def eval_model(alexNet, criterion):
    since = time.time()
    avg_loss = 0
    avg_acc = 0
    loss_test = 0
    acc_test = 0
    
    test_batches = len(dataloaders[TEST])
    print("Hesaplama modeli")
    print('-' * 10)
    
    for i, data in enumerate(dataloaders[TEST]):
        if i % 100 == 0:
            print("\rTest batch {}/{}".format(i, test_batches), end = '', flush=True)
        
        alexNet.train(False)
        alexNet.eval()
        inputs, labels = data
        
        if use_gpu:
            inputs, labels = Variable(inputs.cuda()), Variable(labels.cuda())
        else:
            inputs, labels = Variable(inputs), Variable(labels)
        outputs = alexNet(inputs)

        _, preds = torch.max(outputs.data, 1)
        loss = criterion(outputs, labels)

        loss_test += loss.data
        acc_test += torch.sum(preds == labels.data).cpu().numpy()

        del inputs, labels, outputs, preds
        torch.cuda.empty_cache()
        
    avg_loss = loss_test / dataset_sizes[TEST]
    avg_acc = acc_test / dataset_sizes[TEST]
    
    elapsed_time = time.time() - since
    print()
    print("Hesaplama {:.0f}m {:.0f}s zamanda tamamlandı".format(elapsed_time // 60, elapsed_time % 60))
    print("Ortalama kayıp (test): {:.4f}".format(avg_loss))
    print("Ortalama acc (test): {:.4f}".format(avg_acc))
    print('-' * 10)

alexNet = models.alexnet(pretrained=True)

print(alexNet) #1000

#Eğitim setinin tüm katmanlarını donduruyoruz
for layers in alexNet.features.parameters():
    layers.require_grad = False
#alexNet.classifier[6].out_features=2
#Varsayılan olarak yeni oluşturulan model required_grad =True olmaktadır
num_features = alexNet.classifier[6].in_features
features = list(alexNet.classifier.children())[:-1] # En son katmanı siliyoruz
features.extend([nn.Linear(num_features, len(class_names))]) #4 Çıkış için bizim katmanlarımızı ekliyoruz
alexNet.classifier = nn.Sequential(*features) # Model sınıflandırıcıyı yeniden oluşturuyoruz
print(alexNet)

resume_training = False

if use_gpu:
    alexNet.cuda() #.GPU tarafındaki tüm işlemleri Cuda() ile yapacağız

    criterion = nn.CrossEntropyLoss()

    optimizer_ft = optim.SGD(alexNet.parameters(), lr = 0.001, momentum = 0.9)
    #optimizer_ft = optim.Adam(alexNet.parameters(), lr = 0.0001)
    exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size = 7)

print("Eğitimden önce test ediyoruz")
eval_model(alexNet, criterion)

visualize_model(alexNet) #Eğitmeden önce son kez çıktıları test ediyoruz.

def train_model(alexNet, criterion, optimizer, scheduler, num_epochs):
    since = time.time()
    best_model_wts = copy.deepcopy(alexNet.state_dict())
    best_acc = 0.0
    
    avg_loss = 0
    avg_acc = 0
    avg_loss_val = 0
    avg_acc_val = 0
    
    epoch_losses_train=[]
    epoch_losses_val=[]
    epoch_acc_train=[]
    epoch_acc_val=[]

    train_batches = len(dataloaders[TRAIN])
    val_batches = len(dataloaders[VAL])
    
    for epoch in range(num_epochs):
        print("Epoch {}/{}".format(epoch+1, num_epochs))
        print('-' * 10)
        
        loss_train = 0
        loss_val = 0
        acc_train = 0
        acc_val = 0
        
        alexNet.train(True)
        
        for i, data in enumerate(dataloaders[TRAIN]):
            if i % 100 == 0:
                print("\rTraining batch {}/{}".format(i, train_batches), end='', flush=True)
                
            # Use half training dataset
            if i >= train_batches:
                break
                
            inputs, labels = data
            
            if use_gpu:
                inputs, labels = Variable(inputs.cuda()), Variable(labels.cuda())
            else:
                inputs, labels = Variable(inputs), Variable(labels)
            
            optimizer.zero_grad()
            
            outputs = alexNet(inputs)
            
            _, preds = torch.max(outputs.data, 1)
            loss = criterion(outputs, labels)
            
            loss.backward()
            optimizer.step()
            
            loss_train += loss.data
            acc_train += torch.sum(preds == labels.data).cpu().numpy()
            
            del inputs, labels, outputs, preds
            torch.cuda.empty_cache()
        
        print()
        # * 2 as we only used half of the dataset
        avg_loss = (loss_train.cpu().numpy() ) / dataset_sizes[TRAIN]
        avg_acc = acc_train  / dataset_sizes[TRAIN]
        
        epoch_acc_train.append(avg_acc)
        epoch_losses_train.append(avg_loss)
        alexNet.train(False)
        alexNet.eval()
            
        for i, data in enumerate(dataloaders[VAL]):
            if i % 100 == 0:
                print("\rValidation batch {}/{}".format(i, val_batches), end='', flush=True)
                
            inputs, labels = data
            
            if use_gpu:
                inputs, labels = Variable(inputs.cuda()), Variable(labels.cuda())
            else:
                inputs, labels = Variable(inputs), Variable(labels)
            
            optimizer.zero_grad()
            
            outputs = alexNet(inputs)
            
            _, preds = torch.max(outputs.data, 1)
            loss = criterion(outputs, labels)
            
            loss_val += loss.data
            acc_val += torch.sum(preds == labels.data).cpu().numpy()
            
            del inputs, labels, outputs, preds
            torch.cuda.empty_cache()
        
        avg_loss_val = (loss_val.cpu().numpy()) / dataset_sizes[VAL]
        avg_acc_val = acc_val  / dataset_sizes[VAL]
        epoch_losses_val.append(avg_loss_val)
        epoch_acc_val.append(avg_acc_val)
        print()
        print("Epoch {} result: ".format(epoch+1))
        print("Avg loss (train): {:.4f}".format(avg_loss))
        print("Avg acc (train): {:.4f}".format(avg_acc))
        print("Avg loss (val): {:.4f}".format(avg_loss_val))
        print("Avg acc (val): {:.4f}".format(avg_acc_val))
        print('-' * 10)
        print()
        
        if avg_acc_val > best_acc:
            best_acc = avg_acc_val
            best_model_wts = copy.deepcopy(alexNet.state_dict())
        
    elapsed_time = time.time() - since
    print()
    print("Training completed in {:.0f}m {:.0f}s".format(elapsed_time // 60, elapsed_time % 60))
    print("Best acc: {:.4f}".format(best_acc))
    epoch_arr=[]#EK
    for i in range(num_epochs):#EK
      epoch_arr.append(i+1)#EK
    epoch_arr=np.array(epoch_arr)
    epoch_losses_train=np.array(epoch_losses_train) 
    epoch_acc_train=np.array(epoch_acc_train) 
    epoch_losses_val=np.array(epoch_losses_val)
    epoch_acc_val=np.array(epoch_acc_val)
    draw(epoch_arr,epoch_losses_train,epoch_acc_train,'SGD Optimizer Train',True)#EK
    draw(epoch_arr,epoch_losses_val,epoch_acc_val,'SGD Optimizer Validation',True)#EK
    alexNet.load_state_dict(best_model_wts)
    return alexNet

alexNet = train_model(alexNet, criterion, optimizer_ft, exp_lr_scheduler, num_epochs=10)

array1=[0.0860,0.0705,0.0409,0.0400,0.0390,0.0399,0.0385]
array2=[0.5372,0.6561,0.8666,0.8645,0.8685,0.8614,0.8667]
array3=[0.0816,0.0356,0.0270,0.0214,0.0237,0.0220,0.0191]
array4=[0.6549,0.9013,0.9176,0.9401,0.9296,0.9300,0.9390]
epoch_array=[1,2,3,4,5,6,7]
draw(epoch_array,array1,array2,'SGD Optimizer Train',True)#EK
draw(epoch_array,array3,array4,'SGD Optimizer Validation',True)#EK

eval_model(alexNet, criterion)

visualize_model(alexNet, num_images=8)

PATH="/content/drive/My Drive/MalariaAlexNet.pth"
checkpoint = torch.load(PATH)
filter = checkpoint['features.10.weight'].cpu().data.numpy()

PATH2="/content/drive/My Drive/MalariaAlexNetNormalization.pth"
#torch.save(alexNet.state_dict(), PATH2)